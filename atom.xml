<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BryanHsu&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-13T09:17:40.884Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>BryanHsu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome to BryanHsu&#39;s blog</title>
    <link href="http://example.com/2050/03/07/welcome/"/>
    <id>http://example.com/2050/03/07/welcome/</id>
    <published>2050-03-06T16:27:10.000Z</published>
    <updated>2024-07-13T09:17:40.884Z</updated>
    
    
    <summary type="html">Welcome to BryanHsu&#39;s blog</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>EKS Ingress / Service 如何共用 ELB</title>
    <link href="http://example.com/2024/08/12/eks-nlb-multi/"/>
    <id>http://example.com/2024/08/12/eks-nlb-multi/</id>
    <published>2024-08-12T02:35:00.000Z</published>
    <updated>2024-08-12T14:49:31.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 EKS 的情況下，基本上都會有為 Pod 建立 Ingress &#x2F; Service 來讓服務可以被存取的需求。在 EKS 的場景中，通常都會透過 <code>aws-load-balancer-controller</code>[1]（這也是 AWS 官方建議的方式）來建立 ALB &#x2F; NLB。然而，在預設的情況下，一個 Ingress 會對應到一個 ALB。一個 Service 會對應到一個 NLB。但是很多時候會為了節省成本（或是業務確實沒有那麼大流量的需求）來減少 ALB &#x2F; NLB 的數量。這邊介紹一些可以共用 ALB &#x2F; NLB 的方式。</p><h2 id="ALB"><a href="#ALB" class="headerlink" title="ALB"></a>ALB</h2><p>在使用 <code>aws-load-balancer-controller</code> 的情況下，可以透過 IngressGroup[2] 這個功能來達成共用 ALB 的需求。具體做法是透過為 Ingress 資源添加 <code>alb.ingress.kubernetes.io/group.name</code> annotations。以下為範例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: orange-purple-ingress</span><br><span class="line">  namespace: orange-purple-ns</span><br><span class="line">  labels:</span><br><span class="line">    app: color-2</span><br><span class="line">  annotations:</span><br><span class="line">    alb.ingress.kubernetes.io/scheme: internet-facing</span><br><span class="line">    alb.ingress.kubernetes.io/target-type: ip</span><br><span class="line">    alb.ingress.kubernetes.io/group.name: app-color-lb</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: alb</span><br><span class="line">  rules:</span><br><span class="line">    - http:</span><br><span class="line">        paths:</span><br><span class="line">          - path: /orange</span><br><span class="line">            pathType: Prefix</span><br><span class="line">            backend:</span><br><span class="line">              service:</span><br><span class="line">                name: orange-service</span><br><span class="line">                port:</span><br><span class="line">                  number: 80</span><br></pre></td></tr></table></figure><h2 id="NLB"><a href="#NLB" class="headerlink" title="NLB"></a>NLB</h2><p>在使用 <code>aws-load-balancer-controller</code> 的情況下，官方目前並沒有一個推薦的方式可以做到這件事情。以下提供一些做法：</p><ol><li>自行建立 NLB &#x2F; Listener &#x2F; Targetgroup 等資源，並在 EKS 叢集當中建立 TargetGroupBinding[3] 資源，讓叢集當中多個 Service 可以共用同一個 NLB。以下為範例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: elbv2.k8s.aws/v1beta1</span><br><span class="line">kind: TargetGroupBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: red-tgb</span><br><span class="line">  namespace: red-ns</span><br><span class="line">spec:</span><br><span class="line">  serviceRef:</span><br><span class="line">    name: red-service</span><br><span class="line">    port: 80</span><br><span class="line">  targetGroupARN: &lt;target-group-arn&gt;</span><br><span class="line">  networking:</span><br><span class="line">    ingress:</span><br><span class="line">      - from:</span><br><span class="line">          - ipBlock: </span><br><span class="line">              cidr: &quot;0.0.0.0/0&quot;</span><br><span class="line">        ports: </span><br><span class="line">          - port: 80</span><br></pre></td></tr></table></figure><ol start="2"><li>上面的方式雖然可行，但是 NLB 就會脫離 EKS 叢集的掌控。如果想要讓 NLB 也可以被叢集管理，可以透過為 Service 建立不同的 port，並且讓不同的 port 對應到不同的 Deployment[4]。值得注意的是，這個方式似乎一定要使用 named ports。以下為範例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: exampleapp</span><br><span class="line">      role: fe</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: exampleapp</span><br><span class="line">        role: fe</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: patientplatypus/kubeplayfrontend</span><br><span class="line">        ports:</span><br><span class="line">        - name: frontend</span><br><span class="line">          containerPort: 3000</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: backend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: exampleapp</span><br><span class="line">      role: be</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: exampleapp</span><br><span class="line">        role: be</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: patientplatypus/kubeplaybackend</span><br><span class="line">        ports:</span><br><span class="line">        - name: backend</span><br><span class="line">          containerPort: 5000</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: entrypt</span><br><span class="line">spec:</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - name: backend</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: backend</span><br><span class="line">  - name: frontend</span><br><span class="line">    port: 8081</span><br><span class="line">    targetPort: frontend</span><br><span class="line">  selector:</span><br><span class="line">    app: exampleapp</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>[1] <a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/">https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/</a><br>[2] <a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/guide/ingress/annotations/#ingressgroup">https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/guide/ingress/annotations/#ingressgroup</a><br>[3] <a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/guide/targetgroupbinding/targetgroupbinding/#targetgroupbinding">https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/guide/targetgroupbinding/targetgroupbinding/#targetgroupbinding</a><br>[4] <a href="https://github.com/kubernetes/kubernetes/issues/24875#issuecomment-794596576">https://github.com/kubernetes/kubernetes/issues/24875#issuecomment-794596576</a></p>]]></content>
    
    
    <summary type="html">在使用 EKS 的情況下，基本上都會有為 Pod 建立 Ingress / Service 來讓服務可以被存取的需求。在 EKS 的場景中，通常都會透過 aws-load-balancer-controller...</summary>
    
    
    
    
    <category term="EKS" scheme="http://example.com/tags/EKS/"/>
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubectl port-forward 連線延遲</title>
    <link href="http://example.com/2024/08/01/kubectl-port/"/>
    <id>http://example.com/2024/08/01/kubectl-port/</id>
    <published>2024-08-01T09:15:09.000Z</published>
    <updated>2024-08-12T14:50:17.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>個人在使用 <code>kubectl port-forward</code> 來透過個人本機連線至叢集內的 Service 時，發現應用本身有很嚴重的延遲，並且終端出現很多如下的報錯：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">E0727 04:43:17.308460   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:43:24.054587   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">E0727 04:43:27.345265   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:43:37.306154   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">E0727 04:43:37.383904   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:43:41.308084   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">E0727 04:43:42.641875   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">E0727 04:43:42.986275   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:43:44.239246   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">E0727 04:43:47.416765   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:43:57.452707   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:43:59.748437   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">E0727 04:44:07.487353   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:44:12.987901   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:44:17.522404   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:44:27.558770   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:44:37.593397   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">Handling connection for 3000</span><br><span class="line">E0727 04:44:39.102161   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br><span class="line">E0727 04:44:42.992369   41404 portforward.go:347] error creating error stream for port 3000 -&gt; 3000: Timeout occurred</span><br></pre></td></tr></table></figure><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><p>後續將 <code>kubectl</code> 的版本替換成與 Kubernetes 相同的版本後，可以順利的訪問應用且終端沒有再出現報錯。</p>]]></content>
    
    
    <summary type="html">個人在使用 kubectl port-forward 來透過個人本機連線至叢集內的 Service 時，發現應用本身有很嚴重的延遲，</summary>
    
    
    
    
    <category term="EKS" scheme="http://example.com/tags/EKS/"/>
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>EKS 用戶身份認證流程</title>
    <link href="http://example.com/2024/07/13/eks-auth/"/>
    <id>http://example.com/2024/07/13/eks-auth/</id>
    <published>2024-07-13T09:15:09.000Z</published>
    <updated>2024-08-12T14:02:54.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在研究 EKS 用戶身份認證流程，做個筆記記錄一下。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>當用戶使用 kubectl 操作時，kubectl 會去讀取 ~&#x2F;.kube&#x2F;config 檔案內容</li><li>~&#x2F;.kube&#x2F;config 檔案內容再使用 EKS 場景下，一般都是透過 aws eks update-kubeconfig –name <cluster-name> 指令產生，因此，內容大致如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.kube/config</span><br><span class="line">- name: arn:aws:eks:ap-northeast-1:123456789012:cluster/eks-124</span><br><span class="line">  user:</span><br><span class="line">    exec:</span><br><span class="line">      apiVersion: client.authentication.k8s.io/v1beta1</span><br><span class="line">      args:</span><br><span class="line">      - --region</span><br><span class="line">      - ap-northeast-1</span><br><span class="line">      - eks</span><br><span class="line">      - get-token</span><br><span class="line">      - --cluster-name</span><br><span class="line">      - eks-124</span><br><span class="line">      - --output</span><br><span class="line">      - json</span><br><span class="line">      command: aws</span><br></pre></td></tr></table></figure><p>上述文件內容表明了 ~&#x2F;.kube&#x2F;config 中的 token 是透過 aws eks get-token –cluster-name <cluster-name> –region <region-name> –output json 指令產生。若是攤開成命令，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ aws eks get-token --cluster-name eks-124 --region ap-northeast-1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;kind&quot;: &quot;ExecCredential&quot;,</span><br><span class="line">    &quot;apiVersion&quot;: &quot;client.authentication.k8s.io/v1beta1&quot;,</span><br><span class="line">    &quot;spec&quot;: &#123;&#125;,</span><br><span class="line">    &quot;status&quot;: &#123;</span><br><span class="line">        &quot;expirationTimestamp&quot;: &quot;2024-07-13T18:08:55Z&quot;,</span><br><span class="line">        &quot;token&quot;: &quot;k8s-aws-v1.aHR0cHM6Ly9zdHMuYXAtbm9ydGhlYXN0LTEuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFVTkpDV0JISE9CNlRZUUc0JTJGMjAyNDA3MTMlMkZhcC1ub3J0aGVhc3QtMSUyRnN0cyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzEzVDE3NTQ1NVomWC1BbXotRXhwaXJlcz02MCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QlM0J4LWs4cy1hd3MtaWQmWC1BbXotU2lnbmF0dXJlPWQ1OTQxNmY4YWZmMGEwMTA3NzE4YTM0NDg1MzA5ZDEzZGQ0NDRmZWYyOTc3M2QzNDIwZjRjZjUzZWRmMDNiMDk&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kubectl 在向 API Server 發請求時，會在 header 中以 bearer token 的方式帶入這個 token 來做認證。我們可以透過 curl 驗證這個 token 可用性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ token=k8s-aws-v1.aHR0cHM6Ly9zdHMuYXAtbm9ydGhlYXN0LTEuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFVTkpDV0JISE9CNlRZUUc0JTJGMjAyNDA3MTMlMkZhcC1ub3J0aGVhc3QtMSUyRnN0cyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzEzVDE3NTQ1NVomWC1BbXotRXhwaXJlcz02MCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QlM0J4LWs4cy1hd3MtaWQmWC1BbXotU2lnbmF0dXJlPWQ1OTQxNmY4YWZmMGEwMTA3NzE4YTM0NDg1MzA5ZDEzZGQ0NDRmZWYyOTc3M2QzNDIwZjRjZjUzZWRmMDNiMDk</span><br><span class="line">$ curl https://ABCDEFGHIJKLMNOPQRSTUVWXYZ123456.gr7.ap-northeast-1.eks.amazonaws.com --insecure -H &quot;Authorization: Bearer $token&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;paths&quot;: [</span><br><span class="line">    &quot;/.well-known/openid-configuration&quot;,</span><br><span class="line">    &quot;/api&quot;,</span><br><span class="line">    &quot;/api/v1&quot;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>當請求發送到 API Server 時，API Server 會將請求 header 中的 bearer token 轉給 authentication webhook，authentication webhook 會去解開 token 當中的內容，並呼叫內容當中的 pre-signed URL（GetCallerIdentity）與 IAM 服務進行用戶認證，並取得 account id,、account Arn、UserId 等資訊，如下示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;aHR0cHM6Ly9zdHMuYXAtbm9ydGhlYXN0LTEuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFVTkpDV0JISE9CNlRZUUc0JTJGMjAyNDA3MTMlMkZhcC1ub3J0aGVhc3QtMSUyRnN0cyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzEzVDE3NTQ1NVomWC1BbXotRXhwaXJlcz02MCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QlM0J4LWs4cy1hd3MtaWQmWC1BbXotU2lnbmF0dXJlPWQ1OTQxNmY4YWZmMGEwMTA3NzE4YTM0NDg1MzA5ZDEzZGQ0NDRmZWYyOTc3M2QzNDIwZjRjZjUzZWRmMDNiMDk&quot; | base64 -d</span><br><span class="line">https://sts.ap-northeast-1.amazonaws.com/?Action=GetCallerIdentity&amp;Version=2011-06-15&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAUNJCWBHHOB6TYQG4%2F20240713%2Fap-northeast-1%2Fsts%2Faws4_request&amp;X-Amz-Date=20240713T175455Z&amp;X-Amz-Expires=60&amp;X-Amz-SignedHeaders=host%3Bx-k8s-aws-id&amp;X-Amz-Signature=d59416f8aff0a0107718a34485309d13dd444fef29773d3420f4cf53edf03b                                                    </span><br></pre></td></tr></table></figure><p>在取得這些資訊之後，authentication webhook 會將結果回傳給 API Server</p><ol start="4"><li>API Server 取得 account id、account Arn、UserId 等資訊後，會去讀取 aws-auth ConfigMap 取得用戶在 kubernetes 當中對應的 RBAC 身份組，並確認用戶是否有權限操作資源。</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>[1] <a href="https://aws.github.io/aws-eks-best-practices/security/docs/iam/#controlling-access-to-eks-clusters">https://aws.github.io/aws-eks-best-practices/security/docs/iam/#controlling-access-to-eks-clusters</a><br>[2] <a href="https://betterprogramming.pub/kubernetes-authentication-in-aws-eks-using-iam-authenticator-de3a586e885c">https://betterprogramming.pub/kubernetes-authentication-in-aws-eks-using-iam-authenticator-de3a586e885c</a></p>]]></content>
    
    
    <summary type="html">最近在研究 EKS EKS 用戶身份認證流程，做個筆記...</summary>
    
    
    
    
    <category term="EKS" scheme="http://example.com/tags/EKS/"/>
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Proxmox VE 虛擬機中使用 Kata Containers</title>
    <link href="http://example.com/2021/10/23/pve-vm-kata/"/>
    <id>http://example.com/2021/10/23/pve-vm-kata/</id>
    <published>2021-10-22T20:12:50.000Z</published>
    <updated>2024-02-12T03:06:52.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>個人在 <code>Proxmox VE</code>(簡稱 <code>PVE</code>)的虛擬機(以下簡稱 VM)中想要安裝並啟用 <code>Kata Containers</code>，卻遇到了跑不起來的問題。<br>網路上說的巢狀虛擬化也啟用了，<code>Kata Containers</code> 需要載入的 kernel module 也載入了，但還是起不來。後來有發現問題出在哪裡，因此做個筆記。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><ul><li>環境<ul><li>PVE: 7.0-11</li><li>VM: Ubuntu 20.04</li><li>kata-container: 2.2.2</li></ul></li></ul><p>按照官方安裝<a href="https://github.com/kata-containers/kata-containers/blob/main/docs/install/snap-installation-guide.md">教學</a>，做完之後 <code>kata-runtime kata-check</code> 會出現以下結果：</p><p><img src="/images/kata-fail.png"></p><p>原因推測是因為<code>Kata Containers</code>底層是跑 VM (QEMU)， VM 用沒辦法用假的 CPU 跑起來。<br>預設 <code>PVE</code> 配置給底下 VM 的 CPU 是假的，因此會無法運行。</p><h2 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2><ol><li>到 PVE 上修改 VM 的 CPU 種類，改成 host。<br><img src="/images/pve-vm-cpu.png"></li><li>重啟 VM 就可以成功囉！<br><img src="/images/kata-success.png"></li></ol>]]></content>
    
    
    <summary type="html">個人在 Proxmox VE(簡稱 PVE)的虛擬機(以下簡稱 VM)中想要安裝並啟用 Kata Containers，卻遇到了跑不起來的問題。...</summary>
    
    
    
    
    <category term="PVE" scheme="http://example.com/tags/PVE/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Proxmox VE 環境下用 LXC Container 共享 GPU</title>
    <link href="http://example.com/2021/09/19/pve-lxc-gpu/"/>
    <id>http://example.com/2021/09/19/pve-lxc-gpu/</id>
    <published>2021-09-19T07:24:54.000Z</published>
    <updated>2024-02-11T23:59:24.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近把實驗室的電腦安裝成 <code>Proxmox VE</code>(以下簡稱<code>PVE</code>)，原本記憶體、CPU 等等的資源分享給每台虛擬機(以下簡稱 VM)都好好的，直到有同學需要用到 GPU 才發現 GPU 沒辦法共享。PVE 官方有 GPU passthrough 給 VM 的教學，但是好像一顆 GPU 只能指派給一台 VM，突發奇想 <code>PVE</code> 本身支援 <code>LXC Container</code>，那是不是可以利用 container 來共享 GPU 資源？</p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><p>先在 <code>PVE</code> 的主機上安裝 GPU 驅動程式，建立完 <code>LXC Container</code> 後把 GPU 對應的硬體 cgroup 編號寫進 <code>LXC Container</code> 的設定檔中，最後在 <code>LXC Container</code> 中再裝一次驅動程式，注意需要加上 <code>--no-kernel-module</code> 參數，就可以在 container 中使用顯卡囉。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li><p>更新 <code>PVE</code> 本身的 Sourcelist<br>參考：<a href="https://pve.proxmox.com/wiki/Package_Repositories">https://pve.proxmox.com/wiki/Package_Repositories</a></p></li><li><p>更新 kernel</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure></li><li><p>安裝 PVE headers</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install pve-headers</span><br></pre></td></tr></table></figure></li><li><p>利用 <code>lspci | grep -i nvidia</code> 取得顯卡資訊並從 <a href="https://www.nvidia.com.tw/Download/index.aspx?lang=tw">Nvidia 官網</a>找到對應顯卡驅動。<br>舉例：<code>./NVIDIA-Linux-x86_64-470.63.01.run</code><br>安裝完之後應該會在 <code>/dev</code> 底下看到 Nvidia 顯卡對應的裝置。<br><img src="/images/nvidia-grep.png"><br>利用 <code>nvidia-smi</code> 確認一下顯卡有沒有被驅動程式讀到。<br><img src="/images/nvidia-smi.png"></p></li><li><p>創建 <code>/etc/udev/rules.d/70-nvidia.rules</code> 並寫入以下內容，主要是更改 Nvidia 相關裝置的權限，方便 <code>LXC Container</code> 做使用，重開機之後這個檔案的內容就會被執行，不想重新開機也可以複製貼上指令即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create /nvidia0, /dev/nvidia1 … and /nvidiactl when nvidia module is loaded</span></span><br><span class="line"></span><br><span class="line">KERNEL==<span class="string">&quot;nvidia&quot;</span>, RUN+=<span class="string">&quot;/bin/bash -c &#x27;/usr/bin/nvidia-smi -L &amp;&amp; /bin/chmod 666 /dev/nvidia*&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the CUDA node when nvidia_uvm CUDA module is loaded</span></span><br><span class="line"></span><br><span class="line">KERNEL==<span class="string">&quot;nvidia_uvm&quot;</span>, RUN+=<span class="string">&quot;/bin/bash -c &#x27;/usr/bin/nvidia-modprobe -c0 -u &amp;&amp; /bin/chmod 0666 /dev/nvidia-uvm*&#x27;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>取得 Nvidia 裝置 cgroup number 並寫入 LXC Container 設定檔中。<br>利用 <code>ls -al /dev/nvidia*</code> 與 <code>ls -al /dev/dri/*</code> 可以看到 Nvidia 相關的裝置前面都有 cgroup number，這裡我拿到的是 195, 506, 509, 226。<br><img src="/images/nvidia-cgroup.png"></p></li><li><p>建立 <code>LXC Container</code> 並把對應的裝置跟 cgroup number 寫進設定檔。<br>以下是我寫入的內容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lxc.cgroup.devices.allow: c 195:* rwm</span><br><span class="line">lxc.cgroup.devices.allow: c 506:* rwm</span><br><span class="line">lxc.cgroup.devices.allow: c 509:* rwm</span><br><span class="line">lxc.cgroup.devices.allow: c 226:* rwm</span><br><span class="line"></span><br><span class="line">lxc.mount.entry: /dev/nvidia0 dev/nvidia0 none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/nvidiactl dev/nvidiactl none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/nvidia-modeset dev/nvidia-modeset none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/nvidia-uvm dev/nvidia-uvm none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/nvidia-uvm-tools dev/nvidia-uvm-tools none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/nvidia-caps/nvidia-cap1 dev/nvidia-caps/nvidia-cap1 none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/nvidia-caps/nvidia-cap2 dev/nvidia-caps/nvidia-cap2 none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/dri/card0 dev/dri/card0 none <span class="built_in">bind</span>,optional,create=file</span><br><span class="line">lxc.mount.entry: /dev/dri/renderD128 dev/dri/renderD128 none <span class="built_in">bind</span>,optional,create=file</span><br></pre></td></tr></table></figure><p>結果會長這樣<br><img src="/images/lxc-config.png"></p></li><li><p>在 <code>LXC Container</code> 中再去官網抓同樣的驅動，安裝的時候加上 <code>--no-kernel-module</code> 參數。<br>舉例：<code>./NVIDIA-Linux-x86_64-470.63.01.run --no-kernel-module</code><br>成功囉！<br><img src="/images/lxc-nvidia-smi.png"></p></li></ol><h2 id="附註"><a href="#附註" class="headerlink" title="附註"></a>附註</h2><p>如果 <code>/dev</code> 底下沒有出現 <code>nvidia-modeset</code> 可以用 <code>nvidia-modprobe --modeset</code> 來載入。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://passbe.com/2020/02/19/gpu-nvidia-passthrough-on-proxmox-lxc-container/">https://passbe.com/2020/02/19/gpu-nvidia-passthrough-on-proxmox-lxc-container/</a></li><li><a href="http://ycfu.blog.mypc.tw/2020/11/ai-1pve-lxc-nvidia-gpu-tensorflow.html">http://ycfu.blog.mypc.tw/2020/11/ai-1pve-lxc-nvidia-gpu-tensorflow.html</a></li><li><a href="https://medium.com/@MARatsimbazafy/journey-to-deep-learning-nvidia-gpu-passthrough-to-lxc-container-97d0bc474957">https://medium.com/@MARatsimbazafy/journey-to-deep-learning-nvidia-gpu-passthrough-to-lxc-container-97d0bc474957</a></li><li><a href="https://theorangeone.net/posts/lxc-nvidia-gpu-passthrough/?fbclid=IwAR3o8jH4sp8ceE3GTkudK01TwKK9fJDVyHPGIIN4J3MjEQxrDQMHNB9rI-Q">https://theorangeone.net/posts/lxc-nvidia-gpu-passthrough/?fbclid=IwAR3o8jH4sp8ceE3GTkudK01TwKK9fJDVyHPGIIN4J3MjEQxrDQMHNB9rI-Q</a></li></ul>]]></content>
    
    
    <summary type="html">最近把實驗室的電腦安裝成 Proxmox VE(以下簡稱 PVE)，原本記憶體、CPU 等等的資源分享給每台虛擬機(以下簡稱 VM)都好好的，直到有同學需要用到 GPU 才發現 GPU 沒辦法共享。...</summary>
    
    
    
    
    <category term="PVE" scheme="http://example.com/tags/PVE/"/>
    
    <category term="LXC" scheme="http://example.com/tags/LXC/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 中如何讓 Dashboard 在無 https 的情況下讓外部存取</title>
    <link href="http://example.com/2021/03/22/k8s-dashboard/"/>
    <id>http://example.com/2021/03/22/k8s-dashboard/</id>
    <published>2021-03-22T09:18:07.000Z</published>
    <updated>2024-02-12T00:03:31.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在自學 <code>K8s</code> 的時候，看到官方文件有提到 Web UI (Dashboard)，想說自己操作一下試試看，<br>目標是透過個人電腦的瀏覽器可以進入 cluster 的 dashboard，<br>但是在建立的過程中有遇到一些雷所以在這裡記錄一下。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>兩台機器，一台 master 跟一台 slave，在同一個網域底下，兩台電腦皆是 privete ip。<br><code>master</code> <code>192.168.1.111</code><br><code>slave</code> <code>192.168.1.110</code><br>個人電腦跟 master 與 slave 在同一個網段下。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li><p>首先把 yaml 檔下載下來</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml`</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>recommended.yaml</code> 中的 <code>kubernetes-dashboard</code> Service</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort // 多加這一行</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure></li><li><p>Apply 進 <code>K8s</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure></li><li><p>因為 dashboard 只允許使用 Bearer Token 登入，所以必須要創一個使用者。<br>參考：<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</a></p></li><li><p>取得 dashboard 的 NodePort</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><p>在這個例子中我拿到的是 30144<br><img src="/images/k8s-dashboard.png"><br>接著因為 dashboard 只支援 <code>https</code> 但是我們 <code>service</code> 是使用 <code>NodePort</code> 來創建，<br>所以 url 會是 <code>https://192.168.1.111:30144</code></p></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/</a></li><li><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</a></li><li><a href="https://stackoverflow.com/questions/39864385/how-to-access-expose-kubernetes-dashboard-service-outside-of-a-cluster">https://stackoverflow.com/questions/39864385/how-to-access-expose-kubernetes-dashboard-service-outside-of-a-cluster</a></li></ol>]]></content>
    
    
    <summary type="html">最近在自學 K8s 的時候，看到官方文件有提到 Web UI (Dashboard)，想說自己操作一下試試看，目標是透過個人電腦的瀏覽器可以進入 cluster 的 dashboard，但是在建立的過程中有遇到一些雷所以在這裡記錄一下。</summary>
    
    
    
    
    <category term="K8s" scheme="http://example.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 桌面鍵盤無反應解決辦法</title>
    <link href="http://example.com/2020/10/22/ubuntu-desktop-err/"/>
    <id>http://example.com/2020/10/22/ubuntu-desktop-err/</id>
    <published>2020-10-22T02:31:49.000Z</published>
    <updated>2024-02-12T00:01:39.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用 <code>Ubuntu</code> 的時候，不知道為什麼突然在桌面滑鼠跟鍵盤都沒有反應，上網查了一下有不少人也遇到了這樣的問題。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>nautilus</code> 這個檔案管理工具中的桌面功能是基於 <code>gnome</code> ，貌似這個問題是 <code>gnome</code> 造成的，而這個問題也存在很久了，官方貌似還沒有解決。</p><h2 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2><p>使用 <code>nemo</code> 取代原本的桌面環境。</p><ol><li><p>移除 <code>gnome</code>: <code>sudo rm -r /usr/share/gnome-shell/extensions/desktop-icons@csoriano/</code></p></li><li><p>安裝 <code>nemo</code>: <code>sudo apt install nemo</code></p></li><li><p>把以下內容複製貼上到 <code>~/.config/autostart/nemo-autostart-with-gnome.desktop</code>。預設 <code>/.config</code> 底下是沒有這個路徑的哦！</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Nemo</span><br><span class="line">Comment=Start Nemo desktop at log in</span><br><span class="line">Exec=nemo-desktop</span><br><span class="line">OnlyShowIn=GNOME;</span><br><span class="line">AutostartCondition=GSettings org.nemo.desktop show-desktop-icons</span><br><span class="line">X-GNOME-AutoRestart=true</span><br><span class="line">NoDisplay=true</span><br></pre></td></tr></table></figure><ol start="4"><li>重新登入</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果想要讓 <code>nemo</code> 的排版更像 <code>nautilus</code>。</p><ol><li><code>gsettings set org.nemo.desktop use-desktop-grid false</code></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><p><a href="https://gitlab.gnome.org/GNOME/nautilus/-/issues/158#alternative-solution">https://gitlab.gnome.org/GNOME/nautilus/-/issues/158#alternative-solution</a></p></li><li><p><a href="https://bugs.launchpad.net/ubuntu/+source/gnome-shell-extension-desktop-icons/+bug/1868924/comments/4">https://bugs.launchpad.net/ubuntu/+source/gnome-shell-extension-desktop-icons/+bug/1868924/comments/4</a></p></li><li><p><a href="https://askubuntu.com/questions/1230296/cannot-use-del-key-to-delete-files-on-desktop-in-20-04">https://askubuntu.com/questions/1230296/cannot-use-del-key-to-delete-files-on-desktop-in-20-04</a></p></li></ol>]]></content>
    
    
    <summary type="html">最近在使用 Ubuntu 的時候，不知道為什麼突然在桌面滑鼠跟鍵盤都沒有反應，上網查了一下有不少人也遇到了這樣的問題。</summary>
    
    
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Python3 中實用的 10 種小技巧</title>
    <link href="http://example.com/2020/03/07/python-tips/"/>
    <id>http://example.com/2020/03/07/python-tips/</id>
    <published>2020-03-06T16:27:10.000Z</published>
    <updated>2024-02-12T00:02:52.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Python3 中有一些實用的小技巧，分享給大家。</p><h2 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h2><p>常見寫法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditon:</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以寫成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> <span class="keyword">if</span> condition <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="底線數字表示"><a href="#底線數字表示" class="headerlink" title="底線數字表示"></a>底線數字表示</h2><p>常見寫法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10000000000</span></span><br><span class="line">num2 = <span class="number">100000000</span></span><br></pre></td></tr></table></figure><p>可以寫成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10_000_000_000</span></span><br><span class="line">num2 = <span class="number">100_000_000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num1) <span class="comment"># 10000000000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num1:,&#125;</span>&#x27;</span>) <span class="comment"># 10,000,000,000</span></span><br></pre></td></tr></table></figure><p>提昇可讀性且數字不會被底線影響。</p><h2 id="資源管理器"><a href="#資源管理器" class="headerlink" title="資源管理器"></a>資源管理器</h2><p>通常我們程式做 I&#x2F;O 都有開啟跟關閉，常常會忘記在程式碼結尾忘記關掉。<br>所以 <code>with</code> 這個語法會自動做開啟關閉的動作。</p><p>常見寫法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file_contents = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>可以寫成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_contents = f.read()</span><br></pre></td></tr></table></figure><h2 id="Enumerate"><a href="#Enumerate" class="headerlink" title="Enumerate"></a>Enumerate</h2><p>當我們要走訪一個序列且我們需要他的索引時，</p><p>常見寫法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(index, d)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以寫成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    <span class="built_in">print</span>(index, d)</span><br></pre></td></tr></table></figure><h2 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h2><p>當我們要一次走訪兩個相同長度的序列，</p><p>常見寫法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">nums = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    <span class="built_in">print</span>(d, nums[index])</span><br></pre></td></tr></table></figure><p>可以寫成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">nums = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> d, n <span class="keyword">in</span> <span class="built_in">zip</span>(data, nums):</span><br><span class="line">    <span class="built_in">print</span>(d, n)</span><br></pre></td></tr></table></figure><p><code>zip</code> 甚至可以一次走訪兩個序列以上！</p><h2 id="Unpacking"><a href="#Unpacking" class="headerlink" title="Unpacking"></a>Unpacking</h2><p>當我們有一個 tuple 要依序賦值可以這樣寫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>當我們用不到某個數值時可以使用 <code>_</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, _ = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>在這邊我們視 c 為一個可以被 unpack 的變數<br>所以須加上 <code>*</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, *c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>我們也可以這樣寫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, *_, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h2 id="Setattr-Getattr"><a href="#Setattr-Getattr" class="headerlink" title="Setattr&#x2F;Getattr"></a>Setattr&#x2F;Getattr</h2><p>當我們有一個物件，且我們要使用 String 來取得或是設定他的屬性<br>我們可以這樣寫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(p, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;bryan&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(p, <span class="string">&#x27;name&#x27;</span>)) <span class="comment"># bryan</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GetPass"><a href="#GetPass" class="headerlink" title="GetPass"></a>GetPass</h2><p>當我們要從命令列輸入密碼，我們可以使用 <code>getpass()</code> 取代<br><code>input()</code> 來取得輸入內容，命令列就不會顯示使用者打了什麼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&#x27;Username&#x27;</span>: )</span><br><span class="line">password = getpass(<span class="string">&#x27;Password&#x27;</span>: )</span><br></pre></td></tr></table></figure><h2 id="Dash-m"><a href="#Dash-m" class="headerlink" title="Dash m"></a>Dash m</h2><p><code>-m</code> 指載入指定模組並且直接執行他，在這個例子中我們利用 <code>-m</code> 參數建立一個 http server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m http.server</span><br></pre></td></tr></table></figure><h2 id="Help-Dir"><a href="#Help-Dir" class="headerlink" title="Help&#x2F;Dir"></a>Help&#x2F;Dir</h2><p><code>help</code>：用來顯示某個模組的說明文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from datetime import datetime</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">help</span>(datetime)</span><br></pre></td></tr></table></figure><p>Output：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Help on class datetime <span class="keyword">in</span> module datetime:</span><br><span class="line"></span><br><span class="line">class datetime(<span class="built_in">date</span>)</span><br><span class="line"> |  datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]</span><br><span class="line">])</span><br><span class="line"> |  </span><br><span class="line"> |  The year, month and day arguments are required. tzinfo may be None, or an</span><br><span class="line"> |  instance of a tzinfo subclass. The remaining arguments may be ints.</span><br><span class="line"> |  </span><br><span class="line"> |  Method resolution order:</span><br><span class="line"> |      datetime</span><br><span class="line"> |      <span class="built_in">date</span></span><br><span class="line"> |      builtins.object</span><br><span class="line"> |  </span><br><span class="line"> |  Methods defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __add__(self, value, /)</span><br><span class="line"> |      Return self+value.</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>dir</code>：用來看物件中的屬性及方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from datetime import datetime</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">dir</span>(datetime)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__radd__&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;__rsub__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__sub__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;astimezone&#x27;</span>, <span class="string">&#x27;combine&#x27;</span>, <span class="string">&#x27;ctime&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;day&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;dst&#x27;</span>, <span class="string">&#x27;fold&#x27;</span>, <span class="string">&#x27;fromordinal&#x27;</span>, <span class="string">&#x27;fromtimestamp&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;hour&#x27;</span>, <span class="string">&#x27;isocalendar&#x27;</span>, <span class="string">&#x27;isoformat&#x27;</span>, <span class="string">&#x27;isoweekday&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;microsecond&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>, <span class="string">&#x27;month&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;now&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;resolution&#x27;</span>, <span class="string">&#x27;second&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;strftime&#x27;</span>, <span class="string">&#x27;strptime&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;timetuple&#x27;</span>, <span class="string">&#x27;timetz&#x27;</span>, <span class="string">&#x27;today&#x27;</span>, <span class="string">&#x27;toordinal&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;tzinfo&#x27;</span>, <span class="string">&#x27;tzname&#x27;</span>, <span class="string">&#x27;utcfromtimestamp&#x27;</span>, <span class="string">&#x27;utcnow&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;utcoffset&#x27;</span>, <span class="string">&#x27;utctimetuple&#x27;</span>, <span class="string">&#x27;weekday&#x27;</span>, <span class="string">&#x27;year&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Python3 中有一些實用的小技巧，分享給大家。</summary>
    
    
    
    
    <category term="Python3" scheme="http://example.com/tags/Python3/"/>
    
  </entry>
  
</feed>
